{ config, options, pkgs, lib, ... }:
let
  inherit (lib) util mkEnableOption mkIf mapAttrsToList concatStringsSep concatMapStrings;
  inherit (pkgs) zsh neofetch colordiff fetchFromGitHub zsh-prezto;

  cfg = config.modules.shell.zsh;
  configDir = config.dotfiles.configDir;

  #zsh-prezto = pkgs.zsh-prezto.overrideAttrs (drv: {
  #  version = "unstable-2022-10-27";
  #  src = fetchFromGitHub {
  #    owner = "sorin-ionescu";
  #    repo = "prezto";
  #    rev = "e3a9583f3370e11a0da1414d3f335eac40c1e922";
  #    sha256 = "5vfwFGTOj0swo88MmRSF3LHH1GusBZdsDfHiTSBSWDA=";
  #    fetchSubmodules = true;
  #  };

  #  postPatch = drv.postPatch + ''
  #    rm -fr .git* .editorconfig
  #  '';
  #});
in {
  options.modules.shell.zsh = with lib.types; {
    enable = mkEnableOption "enable zsh";

    aliases = util.mkOpt (attrsOf (either str path)) { };

    rcInit = util.mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshrc and sourced by
      $XDG_CONFIG_HOME/zsh/.zshrc
    '';
    envInit = util.mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshenv and sourced
      by $XDG_CONFIG_HOME/zsh/.zshenv
    '';

    rcFiles = util.mkOpt (listOf (either str path)) [ ];
    envFiles = util.mkOpt (listOf (either str path)) [ ];
  };

  config = mkIf cfg.enable {
    programs.zsh = {
      enable = true;
      enableCompletion = true;
    };

    environment.systemPackages = [
      zsh
      zsh-prezto
      neofetch
      # used by prezto
      colordiff
    ];

    env = {
      ZDOTDIR = "$XDG_CONFIG_HOME/zsh";
      ZSH_CACHE = "$XDG_CACHE_HOME/zsh";
      # ZPREZTODIR = "${zsh-prezto}/share/zsh-prezto"; # running init from the nix store is sooo slow..
      ZPREZTODIR = "$XDG_DATA_HOME/zprezto"; # this makes prezto start much faster, why?
    };

    modules.shell.zsh.rcInit = ''
      if [[ -n "$HISTFILE" && ! -f "$HISTFILE" ]]; then
        mkdir -p $(dirname "$HISTFILE")
      fi
    '';

    home.configFile = {
      "zsh/.p10k.zsh".source    = config.lib.file.mkOutOfStoreSymlink "${configDir}/zsh/.p10k.zsh";
      "zsh/.zpreztorc".source   = config.lib.file.mkOutOfStoreSymlink "${configDir}/zsh/.zpreztorc";
      "zsh/.zshrc".source       = config.lib.file.mkOutOfStoreSymlink "${configDir}/zsh/.zshrc";
      "zsh/.zshenv".source      = config.lib.file.mkOutOfStoreSymlink "${configDir}/zsh/.zshenv";
      "zsh/aliases.zsh".source  = config.lib.file.mkOutOfStoreSymlink "${configDir}/zsh/aliases.zsh";

      # Why am I creating extra.zsh{rc,env} when I could be using extraInit?
      # Because extraInit generates those files in /etc/profile, and mine just
      # write the files to ~/.config/zsh; where it's easier to edit and tweak
      # them in case of issues or when experimenting.
      "zsh/extra.zshrc".text = let
        aliasLines = mapAttrsToList (n: v: ''alias ${n}="${v}"'') cfg.aliases;
      in ''
        # Autogenerated file, do not edit.
        ${concatStringsSep "\n" aliasLines}
        ${concatMapStrings (path: ''
          source '${path}'
        '') cfg.rcFiles}
        ${cfg.rcInit}
      '';

      "zsh/extra.zshenv".text = ''
        # Autogenerated file, do not edit.
        ${concatMapStrings (path: ''
          source '${path}'
        '') cfg.envFiles}
        ${cfg.envInit}
      '';
    };

    home.dataFile = {
      zprezto.source = "${zsh-prezto}/share/zsh-prezto";
    };
  };
}
